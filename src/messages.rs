// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:DiscordShim.ProtoFile)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ProtoFile {
    // message fields
    // @@protoc_insertion_point(field:DiscordShim.ProtoFile.data)
    pub data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:DiscordShim.ProtoFile.filename)
    pub filename: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:DiscordShim.ProtoFile.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProtoFile {
    fn default() -> &'a ProtoFile {
        <ProtoFile as ::protobuf::Message>::default_instance()
    }
}

impl ProtoFile {
    pub fn new() -> ProtoFile {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &ProtoFile| { &m.data },
            |m: &mut ProtoFile| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "filename",
            |m: &ProtoFile| { &m.filename },
            |m: &mut ProtoFile| { &mut m.filename },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProtoFile>(
            "ProtoFile",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProtoFile {
    const NAME: &'static str = "ProtoFile";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = is.read_bytes()?;
                },
                18 => {
                    self.filename = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        if !self.filename.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.filename);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        if !self.filename.is_empty() {
            os.write_string(2, &self.filename)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProtoFile {
        ProtoFile::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.filename.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProtoFile {
        static instance: ProtoFile = ProtoFile {
            data: ::std::vec::Vec::new(),
            filename: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProtoFile {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProtoFile").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProtoFile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtoFile {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DiscordShim.TextField)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TextField {
    // message fields
    // @@protoc_insertion_point(field:DiscordShim.TextField.title)
    pub title: ::std::string::String,
    // @@protoc_insertion_point(field:DiscordShim.TextField.text)
    pub text: ::std::string::String,
    // @@protoc_insertion_point(field:DiscordShim.TextField.inline)
    pub inline: bool,
    // special fields
    // @@protoc_insertion_point(special_field:DiscordShim.TextField.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TextField {
    fn default() -> &'a TextField {
        <TextField as ::protobuf::Message>::default_instance()
    }
}

impl TextField {
    pub fn new() -> TextField {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title",
            |m: &TextField| { &m.title },
            |m: &mut TextField| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "text",
            |m: &TextField| { &m.text },
            |m: &mut TextField| { &mut m.text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "inline",
            |m: &TextField| { &m.inline },
            |m: &mut TextField| { &mut m.inline },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TextField>(
            "TextField",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TextField {
    const NAME: &'static str = "TextField";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.title = is.read_string()?;
                },
                18 => {
                    self.text = is.read_string()?;
                },
                24 => {
                    self.inline = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.text);
        }
        if self.inline != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.text.is_empty() {
            os.write_string(2, &self.text)?;
        }
        if self.inline != false {
            os.write_bool(3, self.inline)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TextField {
        TextField::new()
    }

    fn clear(&mut self) {
        self.title.clear();
        self.text.clear();
        self.inline = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TextField {
        static instance: TextField = TextField {
            title: ::std::string::String::new(),
            text: ::std::string::String::new(),
            inline: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TextField {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TextField").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TextField {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TextField {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DiscordShim.EmbedContent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EmbedContent {
    // message fields
    // @@protoc_insertion_point(field:DiscordShim.EmbedContent.title)
    pub title: ::std::string::String,
    // @@protoc_insertion_point(field:DiscordShim.EmbedContent.description)
    pub description: ::std::string::String,
    // @@protoc_insertion_point(field:DiscordShim.EmbedContent.author)
    pub author: ::std::string::String,
    // @@protoc_insertion_point(field:DiscordShim.EmbedContent.color)
    pub color: i32,
    // @@protoc_insertion_point(field:DiscordShim.EmbedContent.snapshot)
    pub snapshot: ::protobuf::MessageField<ProtoFile>,
    // @@protoc_insertion_point(field:DiscordShim.EmbedContent.textfield)
    pub textfield: ::std::vec::Vec<TextField>,
    // special fields
    // @@protoc_insertion_point(special_field:DiscordShim.EmbedContent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EmbedContent {
    fn default() -> &'a EmbedContent {
        <EmbedContent as ::protobuf::Message>::default_instance()
    }
}

impl EmbedContent {
    pub fn new() -> EmbedContent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title",
            |m: &EmbedContent| { &m.title },
            |m: &mut EmbedContent| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &EmbedContent| { &m.description },
            |m: &mut EmbedContent| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "author",
            |m: &EmbedContent| { &m.author },
            |m: &mut EmbedContent| { &mut m.author },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "color",
            |m: &EmbedContent| { &m.color },
            |m: &mut EmbedContent| { &mut m.color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ProtoFile>(
            "snapshot",
            |m: &EmbedContent| { &m.snapshot },
            |m: &mut EmbedContent| { &mut m.snapshot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "textfield",
            |m: &EmbedContent| { &m.textfield },
            |m: &mut EmbedContent| { &mut m.textfield },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EmbedContent>(
            "EmbedContent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EmbedContent {
    const NAME: &'static str = "EmbedContent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.title = is.read_string()?;
                },
                18 => {
                    self.description = is.read_string()?;
                },
                26 => {
                    self.author = is.read_string()?;
                },
                32 => {
                    self.color = is.read_int32()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.snapshot)?;
                },
                50 => {
                    self.textfield.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.author.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.author);
        }
        if self.color != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.color);
        }
        if let Some(v) = self.snapshot.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.textfield {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.author.is_empty() {
            os.write_string(3, &self.author)?;
        }
        if self.color != 0 {
            os.write_int32(4, self.color)?;
        }
        if let Some(v) = self.snapshot.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        for v in &self.textfield {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EmbedContent {
        EmbedContent::new()
    }

    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.author.clear();
        self.color = 0;
        self.snapshot.clear();
        self.textfield.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EmbedContent {
        static instance: EmbedContent = EmbedContent {
            title: ::std::string::String::new(),
            description: ::std::string::String::new(),
            author: ::std::string::String::new(),
            color: 0,
            snapshot: ::protobuf::MessageField::none(),
            textfield: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EmbedContent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EmbedContent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EmbedContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmbedContent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DiscordShim.Presence)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Presence {
    // message fields
    // @@protoc_insertion_point(field:DiscordShim.Presence.presence)
    pub presence: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:DiscordShim.Presence.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Presence {
    fn default() -> &'a Presence {
        <Presence as ::protobuf::Message>::default_instance()
    }
}

impl Presence {
    pub fn new() -> Presence {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "presence",
            |m: &Presence| { &m.presence },
            |m: &mut Presence| { &mut m.presence },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Presence>(
            "Presence",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Presence {
    const NAME: &'static str = "Presence";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.presence = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.presence.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.presence);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.presence.is_empty() {
            os.write_string(1, &self.presence)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Presence {
        Presence::new()
    }

    fn clear(&mut self) {
        self.presence.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Presence {
        static instance: Presence = Presence {
            presence: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Presence {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Presence").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Presence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Presence {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DiscordShim.Settings)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Settings {
    // message fields
    // @@protoc_insertion_point(field:DiscordShim.Settings.channel_id)
    pub channel_id: u64,
    // @@protoc_insertion_point(field:DiscordShim.Settings.presence_enabled)
    pub presence_enabled: bool,
    // @@protoc_insertion_point(field:DiscordShim.Settings.cycle_time)
    pub cycle_time: i32,
    // @@protoc_insertion_point(field:DiscordShim.Settings.command_prefix)
    pub command_prefix: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:DiscordShim.Settings.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Settings {
    fn default() -> &'a Settings {
        <Settings as ::protobuf::Message>::default_instance()
    }
}

impl Settings {
    pub fn new() -> Settings {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_id",
            |m: &Settings| { &m.channel_id },
            |m: &mut Settings| { &mut m.channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "presence_enabled",
            |m: &Settings| { &m.presence_enabled },
            |m: &mut Settings| { &mut m.presence_enabled },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cycle_time",
            |m: &Settings| { &m.cycle_time },
            |m: &mut Settings| { &mut m.cycle_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "command_prefix",
            |m: &Settings| { &m.command_prefix },
            |m: &mut Settings| { &mut m.command_prefix },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Settings>(
            "Settings",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Settings {
    const NAME: &'static str = "Settings";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.channel_id = is.read_uint64()?;
                },
                16 => {
                    self.presence_enabled = is.read_bool()?;
                },
                24 => {
                    self.cycle_time = is.read_int32()?;
                },
                34 => {
                    self.command_prefix = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.channel_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.channel_id);
        }
        if self.presence_enabled != false {
            my_size += 1 + 1;
        }
        if self.cycle_time != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.cycle_time);
        }
        if !self.command_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.command_prefix);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.channel_id != 0 {
            os.write_uint64(1, self.channel_id)?;
        }
        if self.presence_enabled != false {
            os.write_bool(2, self.presence_enabled)?;
        }
        if self.cycle_time != 0 {
            os.write_int32(3, self.cycle_time)?;
        }
        if !self.command_prefix.is_empty() {
            os.write_string(4, &self.command_prefix)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Settings {
        Settings::new()
    }

    fn clear(&mut self) {
        self.channel_id = 0;
        self.presence_enabled = false;
        self.cycle_time = 0;
        self.command_prefix.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Settings {
        static instance: Settings = Settings {
            channel_id: 0,
            presence_enabled: false,
            cycle_time: 0,
            command_prefix: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Settings {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Settings").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Settings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Settings {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DiscordShim.Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Request {
    // message fields
    // @@protoc_insertion_point(field:DiscordShim.Request.user)
    pub user: u64,
    // message oneof groups
    pub message: ::std::option::Option<request::Message>,
    // special fields
    // @@protoc_insertion_point(special_field:DiscordShim.Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // string command = 2;

    pub fn command(&self) -> &str {
        match self.message {
            ::std::option::Option::Some(request::Message::Command(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_command(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_command(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(request::Message::Command(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_command(&mut self, v: ::std::string::String) {
        self.message = ::std::option::Option::Some(request::Message::Command(v))
    }

    // Mutable pointer to the field.
    pub fn mut_command(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(request::Message::Command(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(request::Message::Command(::std::string::String::new()));
        }
        match self.message {
            ::std::option::Option::Some(request::Message::Command(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_command(&mut self) -> ::std::string::String {
        if self.has_command() {
            match self.message.take() {
                ::std::option::Option::Some(request::Message::Command(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .DiscordShim.ProtoFile file = 3;

    pub fn file(&self) -> &ProtoFile {
        match self.message {
            ::std::option::Option::Some(request::Message::File(ref v)) => v,
            _ => <ProtoFile as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_file(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_file(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(request::Message::File(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_file(&mut self, v: ProtoFile) {
        self.message = ::std::option::Option::Some(request::Message::File(v))
    }

    // Mutable pointer to the field.
    pub fn mut_file(&mut self) -> &mut ProtoFile {
        if let ::std::option::Option::Some(request::Message::File(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(request::Message::File(ProtoFile::new()));
        }
        match self.message {
            ::std::option::Option::Some(request::Message::File(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_file(&mut self) -> ProtoFile {
        if self.has_file() {
            match self.message.take() {
                ::std::option::Option::Some(request::Message::File(v)) => v,
                _ => panic!(),
            }
        } else {
            ProtoFile::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user",
            |m: &Request| { &m.user },
            |m: &mut Request| { &mut m.user },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "command",
            Request::has_command,
            Request::command,
            Request::set_command,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ProtoFile>(
            "file",
            Request::has_file,
            Request::file,
            Request::mut_file,
            Request::set_file,
        ));
        oneofs.push(request::Message::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Request>(
            "Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Request {
    const NAME: &'static str = "Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.user = is.read_uint64()?;
                },
                18 => {
                    self.message = ::std::option::Option::Some(request::Message::Command(is.read_string()?));
                },
                26 => {
                    self.message = ::std::option::Option::Some(request::Message::File(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.user != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.user);
        }
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &request::Message::Command(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &request::Message::File(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.user != 0 {
            os.write_uint64(1, self.user)?;
        }
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &request::Message::Command(ref v) => {
                    os.write_string(2, v)?;
                },
                &request::Message::File(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Request {
        Request::new()
    }

    fn clear(&mut self) {
        self.user = 0;
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Request {
        static instance: Request = Request {
            user: 0,
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Request`
pub mod request {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:DiscordShim.Request.message)
    pub enum Message {
        // @@protoc_insertion_point(oneof_field:DiscordShim.Request.command)
        Command(::std::string::String),
        // @@protoc_insertion_point(oneof_field:DiscordShim.Request.file)
        File(super::ProtoFile),
    }

    impl ::protobuf::Oneof for Message {
    }

    impl ::protobuf::OneofFull for Message {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Request as ::protobuf::MessageFull>::descriptor().oneof_by_name("message").unwrap()).clone()
        }
    }

    impl Message {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Message>("message")
        }
    }
}

// @@protoc_insertion_point(message:DiscordShim.Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Response {
    // message oneof groups
    pub field: ::std::option::Option<response::Field>,
    // special fields
    // @@protoc_insertion_point(special_field:DiscordShim.Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // .DiscordShim.EmbedContent embed = 1;

    pub fn embed(&self) -> &EmbedContent {
        match self.field {
            ::std::option::Option::Some(response::Field::Embed(ref v)) => v,
            _ => <EmbedContent as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_embed(&mut self) {
        self.field = ::std::option::Option::None;
    }

    pub fn has_embed(&self) -> bool {
        match self.field {
            ::std::option::Option::Some(response::Field::Embed(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_embed(&mut self, v: EmbedContent) {
        self.field = ::std::option::Option::Some(response::Field::Embed(v))
    }

    // Mutable pointer to the field.
    pub fn mut_embed(&mut self) -> &mut EmbedContent {
        if let ::std::option::Option::Some(response::Field::Embed(_)) = self.field {
        } else {
            self.field = ::std::option::Option::Some(response::Field::Embed(EmbedContent::new()));
        }
        match self.field {
            ::std::option::Option::Some(response::Field::Embed(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_embed(&mut self) -> EmbedContent {
        if self.has_embed() {
            match self.field.take() {
                ::std::option::Option::Some(response::Field::Embed(v)) => v,
                _ => panic!(),
            }
        } else {
            EmbedContent::new()
        }
    }

    // .DiscordShim.Presence presence = 2;

    pub fn presence(&self) -> &Presence {
        match self.field {
            ::std::option::Option::Some(response::Field::Presence(ref v)) => v,
            _ => <Presence as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_presence(&mut self) {
        self.field = ::std::option::Option::None;
    }

    pub fn has_presence(&self) -> bool {
        match self.field {
            ::std::option::Option::Some(response::Field::Presence(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_presence(&mut self, v: Presence) {
        self.field = ::std::option::Option::Some(response::Field::Presence(v))
    }

    // Mutable pointer to the field.
    pub fn mut_presence(&mut self) -> &mut Presence {
        if let ::std::option::Option::Some(response::Field::Presence(_)) = self.field {
        } else {
            self.field = ::std::option::Option::Some(response::Field::Presence(Presence::new()));
        }
        match self.field {
            ::std::option::Option::Some(response::Field::Presence(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_presence(&mut self) -> Presence {
        if self.has_presence() {
            match self.field.take() {
                ::std::option::Option::Some(response::Field::Presence(v)) => v,
                _ => panic!(),
            }
        } else {
            Presence::new()
        }
    }

    // .DiscordShim.ProtoFile file = 3;

    pub fn file(&self) -> &ProtoFile {
        match self.field {
            ::std::option::Option::Some(response::Field::File(ref v)) => v,
            _ => <ProtoFile as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_file(&mut self) {
        self.field = ::std::option::Option::None;
    }

    pub fn has_file(&self) -> bool {
        match self.field {
            ::std::option::Option::Some(response::Field::File(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_file(&mut self, v: ProtoFile) {
        self.field = ::std::option::Option::Some(response::Field::File(v))
    }

    // Mutable pointer to the field.
    pub fn mut_file(&mut self) -> &mut ProtoFile {
        if let ::std::option::Option::Some(response::Field::File(_)) = self.field {
        } else {
            self.field = ::std::option::Option::Some(response::Field::File(ProtoFile::new()));
        }
        match self.field {
            ::std::option::Option::Some(response::Field::File(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_file(&mut self) -> ProtoFile {
        if self.has_file() {
            match self.field.take() {
                ::std::option::Option::Some(response::Field::File(v)) => v,
                _ => panic!(),
            }
        } else {
            ProtoFile::new()
        }
    }

    // .DiscordShim.Settings settings = 4;

    pub fn settings(&self) -> &Settings {
        match self.field {
            ::std::option::Option::Some(response::Field::Settings(ref v)) => v,
            _ => <Settings as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_settings(&mut self) {
        self.field = ::std::option::Option::None;
    }

    pub fn has_settings(&self) -> bool {
        match self.field {
            ::std::option::Option::Some(response::Field::Settings(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_settings(&mut self, v: Settings) {
        self.field = ::std::option::Option::Some(response::Field::Settings(v))
    }

    // Mutable pointer to the field.
    pub fn mut_settings(&mut self) -> &mut Settings {
        if let ::std::option::Option::Some(response::Field::Settings(_)) = self.field {
        } else {
            self.field = ::std::option::Option::Some(response::Field::Settings(Settings::new()));
        }
        match self.field {
            ::std::option::Option::Some(response::Field::Settings(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_settings(&mut self) -> Settings {
        if self.has_settings() {
            match self.field.take() {
                ::std::option::Option::Some(response::Field::Settings(v)) => v,
                _ => panic!(),
            }
        } else {
            Settings::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, EmbedContent>(
            "embed",
            Response::has_embed,
            Response::embed,
            Response::mut_embed,
            Response::set_embed,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Presence>(
            "presence",
            Response::has_presence,
            Response::presence,
            Response::mut_presence,
            Response::set_presence,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ProtoFile>(
            "file",
            Response::has_file,
            Response::file,
            Response::mut_file,
            Response::set_file,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Settings>(
            "settings",
            Response::has_settings,
            Response::settings,
            Response::mut_settings,
            Response::set_settings,
        ));
        oneofs.push(response::Field::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.field = ::std::option::Option::Some(response::Field::Embed(is.read_message()?));
                },
                18 => {
                    self.field = ::std::option::Option::Some(response::Field::Presence(is.read_message()?));
                },
                26 => {
                    self.field = ::std::option::Option::Some(response::Field::File(is.read_message()?));
                },
                34 => {
                    self.field = ::std::option::Option::Some(response::Field::Settings(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.field {
            match v {
                &response::Field::Embed(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &response::Field::Presence(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &response::Field::File(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &response::Field::Settings(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.field {
            match v {
                &response::Field::Embed(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &response::Field::Presence(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &response::Field::File(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &response::Field::Settings(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.field = ::std::option::Option::None;
        self.field = ::std::option::Option::None;
        self.field = ::std::option::Option::None;
        self.field = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            field: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Response`
pub mod response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:DiscordShim.Response.field)
    pub enum Field {
        // @@protoc_insertion_point(oneof_field:DiscordShim.Response.embed)
        Embed(super::EmbedContent),
        // @@protoc_insertion_point(oneof_field:DiscordShim.Response.presence)
        Presence(super::Presence),
        // @@protoc_insertion_point(oneof_field:DiscordShim.Response.file)
        File(super::ProtoFile),
        // @@protoc_insertion_point(oneof_field:DiscordShim.Response.settings)
        Settings(super::Settings),
    }

    impl ::protobuf::Oneof for Field {
    }

    impl ::protobuf::OneofFull for Field {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Response as ::protobuf::MessageFull>::descriptor().oneof_by_name("field").unwrap()).clone()
        }
    }

    impl Field {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Field>("field")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emessages.proto\x12\x0bDiscordShim\";\n\tProtoFile\x12\x12\n\x04dat\
    a\x18\x01\x20\x01(\x0cR\x04data\x12\x1a\n\x08filename\x18\x02\x20\x01(\t\
    R\x08filename\"M\n\tTextField\x12\x14\n\x05title\x18\x01\x20\x01(\tR\x05\
    title\x12\x12\n\x04text\x18\x02\x20\x01(\tR\x04text\x12\x16\n\x06inline\
    \x18\x03\x20\x01(\x08R\x06inline\"\xde\x01\n\x0cEmbedContent\x12\x14\n\
    \x05title\x18\x01\x20\x01(\tR\x05title\x12\x20\n\x0bdescription\x18\x02\
    \x20\x01(\tR\x0bdescription\x12\x16\n\x06author\x18\x03\x20\x01(\tR\x06a\
    uthor\x12\x14\n\x05color\x18\x04\x20\x01(\x05R\x05color\x122\n\x08snapsh\
    ot\x18\x05\x20\x01(\x0b2\x16.DiscordShim.ProtoFileR\x08snapshot\x124\n\t\
    textfield\x18\x06\x20\x03(\x0b2\x16.DiscordShim.TextFieldR\ttextfield\"&\
    \n\x08Presence\x12\x1a\n\x08presence\x18\x01\x20\x01(\tR\x08presence\"\
    \x9a\x01\n\x08Settings\x12\x1d\n\nchannel_id\x18\x01\x20\x01(\x04R\tchan\
    nelId\x12)\n\x10presence_enabled\x18\x02\x20\x01(\x08R\x0fpresenceEnable\
    d\x12\x1d\n\ncycle_time\x18\x03\x20\x01(\x05R\tcycleTime\x12%\n\x0ecomma\
    nd_prefix\x18\x04\x20\x01(\tR\rcommandPrefix\"r\n\x07Request\x12\x12\n\
    \x04user\x18\x01\x20\x01(\x04R\x04user\x12\x1a\n\x07command\x18\x02\x20\
    \x01(\tH\0R\x07command\x12,\n\x04file\x18\x03\x20\x01(\x0b2\x16.DiscordS\
    him.ProtoFileH\0R\x04fileB\t\n\x07message\"\xde\x01\n\x08Response\x121\n\
    \x05embed\x18\x01\x20\x01(\x0b2\x19.DiscordShim.EmbedContentH\0R\x05embe\
    d\x123\n\x08presence\x18\x02\x20\x01(\x0b2\x15.DiscordShim.PresenceH\0R\
    \x08presence\x12,\n\x04file\x18\x03\x20\x01(\x0b2\x16.DiscordShim.ProtoF\
    ileH\0R\x04file\x123\n\x08settings\x18\x04\x20\x01(\x0b2\x15.DiscordShim\
    .SettingsH\0R\x08settingsB\x07\n\x05fieldb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(ProtoFile::generated_message_descriptor_data());
            messages.push(TextField::generated_message_descriptor_data());
            messages.push(EmbedContent::generated_message_descriptor_data());
            messages.push(Presence::generated_message_descriptor_data());
            messages.push(Settings::generated_message_descriptor_data());
            messages.push(Request::generated_message_descriptor_data());
            messages.push(Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
